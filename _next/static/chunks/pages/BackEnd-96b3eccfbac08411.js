(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1758],{34434:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/BackEnd",function(){return t(34391)}])},7925:function(e,n,t){"use strict";t.d(n,{CG:function(){return l},TL:function(){return s}});var i=t(45007);let s=i.I0,l=i.v9},34391:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return u}});var i=t(85893),s=t(51233),l=t(15861),r=t(86886),d=t(66242),o=t(44267),c=t(23029),a=t(90948),f=t(90629),m=t(67294),h=t(89285),x=t(55534),j=t(7925);let g=(0,a.ZP)(f.Z)(e=>{let{theme:n}=e;return{backgroundColor:"dark"===n.palette.mode?"#1A2027":"#fff",...n.typography.body2,padding:n.spacing(1),textAlign:"center",color:n.palette.text.secondary}}),y=(0,a.ZP)(f.Z)(e=>{let{theme:n}=e;return{backgroundColor:"dark"===n.palette.mode?"#1A2027":"#fff",...n.typography.body2,padding:n.spacing(3),color:n.palette.text.secondary}});function u(){let e=(0,j.TL)(),{prefix:n}=(0,m.useContext)(h.ZP),t=(0,j.CG)(e=>e.page.smallMode),a=t?16:32;return(0,m.useEffect)(()=>{let n=()=>{var n;let t=null===(n=document.getElementById("background_container"))||void 0===n?void 0:n.offsetWidth;t&&t<=900?e((0,x.gh)(!0)):e((0,x.gh)(!1))};return n(),window.addEventListener("resize",n),()=>{window.removeEventListener("resize",n)}},[]),(0,i.jsx)("div",{id:"background_container",style:{height:"100%",width:"100%",backgroundColor:"#f4f5ff"},children:(0,i.jsxs)(s.Z,{style:{display:"flex",justifyContent:"center",alignItems:"center"},children:[(0,i.jsx)(l.Z,{style:{fontSize:2*a,textAlign:t?"center":"left",marginTop:"1rem",marginBottom:t?"1rem":"3rem"},children:"\uD83C\uDF10 백엔드 상세 설명"}),(0,i.jsxs)(s.Z,{style:{display:"flex",width:"100%",justifyContent:"center",alignItems:"center",marginBottom:"1rem"},children:[(0,i.jsx)(l.Z,{style:{fontSize:t?1.5*a:1.2*a},children:"백엔드 구조도(Python)"}),(0,i.jsx)("div",{style:{display:"flex",width:"70%",justifyContent:"center"},children:(0,i.jsx)("img",{src:"".concat(n,"/image/image/backend.png"),style:{objectFit:"contain",borderRadius:"2rem"}})})]}),(0,i.jsx)(g,{style:{width:"90%",marginBottom:"3rem"},children:(0,i.jsxs)(s.Z,{spacing:2,children:[(0,i.jsxs)(y,{variant:"outlined",elevation:6,children:[(0,i.jsx)(l.Z,{style:{fontWeight:"bold",fontSize:t?1.3*a:a},children:"목표"}),(0,i.jsxs)("div",{children:[(0,i.jsx)(l.Z,{style:{textAlign:"left",marginLeft:t?.8*a:a,fontSize:t?1.1*a:.8*a},children:"1. MQTT 제어"}),(0,i.jsxs)(l.Z,{style:{textAlign:"left",marginLeft:1.5*a,fontSize:t?.9*a:.5*a},children:[(0,i.jsx)("li",{children:"Android / Switch로부터 들어오는 MQTT 메세지 처리."}),(0,i.jsx)("li",{children:"정형화 된 JSON 타입으로 데이터 전송 및 처리."}),(0,i.jsx)("li",{children:"실시간 요청 처리"})]}),(0,i.jsx)("br",{}),(0,i.jsx)(l.Z,{style:{textAlign:"left",marginLeft:t?.8*a:a,fontSize:t?1.1*a:.8*a},children:"2. Scheduler를 통한 원하는 시간에 이벤트 발생"}),(0,i.jsxs)(l.Z,{style:{textAlign:"left",marginLeft:1.5*a,fontSize:t?.9*a:.5*a},children:[(0,i.jsx)("li",{children:"설정한 시간에 원하는 동작을 하도록 설정."}),(0,i.jsx)("li",{children:"즉 예약으로 원하는 전등에 원하는 동작을 설정."})]}),(0,i.jsx)("br",{}),(0,i.jsx)(l.Z,{style:{textAlign:"left",marginLeft:t?.8*a:a,fontSize:t?1.1*a:.8*a},children:"3. Multi-Processing을 통한 독립적 실행"}),(0,i.jsxs)(l.Z,{style:{textAlign:"left",marginLeft:1.5*a,fontSize:t?.9*a:.5*a},children:[(0,i.jsx)("li",{children:"MQTT는 subscribe 기능을 실시간으로 처리하기 위해 하나의 프로세스를 온전히 다 사용함."}),(0,i.jsx)("li",{children:"예약 기능(scheduler)를 위해 별도의 프로세스가 필요함."}),(0,i.jsx)("li",{children:"파이썬은 멀티 쓰레드 개념이 없기에 멀티 프로세스를 사용."})]})]})]}),(0,i.jsx)(l.Z,{style:{fontSize:t?1.3*a:a},children:"IoT 중계 기능"}),(0,i.jsx)(l.Z,{style:{fontSize:t?1.1*a:.8*a},children:"▪ Android ➡ Server"}),(0,i.jsx)(l.Z,{style:{fontSize:t?.9*a:.5*a},children:"▪ 작동 순서"}),(0,i.jsx)("div",{style:{display:"flex",width:"100%",justifyContent:"center",alignItems:"center",marginBottom:"1rem"},children:(0,i.jsx)("div",{style:{display:"flex",width:"70%",alignItems:"center",justifyContent:"center"},children:(0,i.jsx)("img",{src:"".concat(n,"/image/image/MQTTFromAndroid.png"),style:{objectFit:"contain",borderRadius:"2rem"}})})}),(0,i.jsx)(l.Z,{variant:"body1",children:"▪ 코드"}),(0,i.jsx)("div",{style:{margin:"1rem",textAlign:"left"},children:(0,i.jsx)(c.dn,{language:"python",showLineNumbers:!0,theme:c.cL,text:'def on_message_fromAndroid(self, client, user_data, msg):\n            self.payload = msg.payload.decode("utf-8")\n            print("from Android message")\n            print(self.payload)\n            if self.payload is not None:\n                if self.payload == \'reserve\':\n                    print("from android if")\n                    if user_data is not None:\n                        self.queue = user_data\n                        self.queue.put("restart")\n                else:\n                    print("from android else")\n                    self.dict = json.JSON_Parser_android(self.payload)\n                    self.on_publish(\'MyHome/Light/Pub/\'+self.dict[\'room\'], self.payload)'})}),(0,i.jsx)(l.Z,{variant:"h6",children:"▪ Switch ➡ Server"}),(0,i.jsx)(l.Z,{variant:"body1",children:"▪ 작동 순서"}),(0,i.jsx)("div",{style:{display:"flex",width:"100%",justifyContent:"center",alignItems:"center",marginBottom:"1rem"},children:(0,i.jsx)("div",{style:{display:"flex",width:"70%",justifyContent:"center",alignItems:"center"},children:(0,i.jsx)("img",{src:"".concat(n,"/image/image/MQTTFromSwitch.png"),style:{objectFit:"contain",borderRadius:"2rem"}})})}),(0,i.jsx)(l.Z,{variant:"body1",children:"▪ 코드"}),(0,i.jsx)("div",{style:{margin:"1rem",textAlign:"left"},children:(0,i.jsx)(c.dn,{text:'    def on_message_fromSwitch(self, client, user_data, msg):\n            self.payload = msg.payload.decode("utf-8")\n            if self.payload is not None and self.payload[0] == "{" and self.payload[-1] == "}":\n                self.dict = json.JSON_Parser(self.payload)\n                if self.dict[\'sender\'] == \'Server\':  # return control data part\n                    if self.dict[\'room\'] in self.Room:\n                        self.Room[self.dict[\'room\']] = "On"\n                        network.SQL_Def("Light", self.dict)\n                        #print("room : " + self.dict[\'room\'])\n                        if self.dict[\'room\'] == \'small Room\':\n                            for (room, state) in self.Room.items():\n                                self.diction = [(\'message\', state), (\'room\', room)]\n                                network.SQL_Def("Connect", self.diction)\n                                self.Room[room] = "Off"\n                else:  # Light state part\n                    network.SQL_Def("LightRecord", self.dict)\n                    network.SQL_Def("Light", self.dict)\n                    self.diction = json.JSON_ENCODE(self.dict)\n                    self.on_publish(\'MyHome/Light/Result\', self.diction)\n            else:\n                print("can\'t work in on_message")\n                print(self.payload)',language:"python",showLineNumbers:!0,theme:c.cL})})]})}),(0,i.jsxs)(g,{style:{width:"90%",marginBottom:"3rem"},children:[(0,i.jsx)(l.Z,{style:{fontWeight:"bold",fontSize:t?1.3*a:a,marginBottom:a},children:"발생한 문제 및 해결 방법"}),(0,i.jsxs)(s.Z,{spacing:2,children:[(0,i.jsxs)(r.ZP,{container:!0,children:[(0,i.jsx)(r.ZP,{item:!0,xs:12,sm:12,md:5,lg:5,children:(0,i.jsx)(d.Z,{children:(0,i.jsx)(o.Z,{children:(0,i.jsx)(l.Z,{variant:"body2",children:"주기적으로 스위치 연결 상태 및 현 상태(on/off) 정보 필요"})})})}),(0,i.jsx)(r.ZP,{item:!0,xs:12,sm:12,md:2,lg:2,style:{justifyContent:"center",alignItems:"center",display:"flex"},children:(0,i.jsx)(l.Z,{children:t?"⬇":"➡"})}),(0,i.jsx)(r.ZP,{item:!0,xs:12,sm:12,md:5,lg:5,children:(0,i.jsx)(d.Z,{children:(0,i.jsx)(o.Z,{children:(0,i.jsx)(l.Z,{variant:"body2",children:"1분마다 주기적으로 각 스위치에 상태 확인 신호를 보내고(pub), 이에 대한 결과값을 받아(sub) DB에 저장하는 방식으로 해결."})})})})]}),t&&(0,i.jsx)("hr",{}),(0,i.jsxs)(r.ZP,{container:!0,children:[(0,i.jsx)(r.ZP,{item:!0,xs:12,sm:12,md:5,lg:5,children:(0,i.jsx)(d.Z,{children:(0,i.jsx)(o.Z,{children:(0,i.jsx)(l.Z,{variant:"body2",children:"서버가 정전으로 재부팅 되어도 다시 백엔드가 실행되어야 함."})})})}),(0,i.jsx)(r.ZP,{item:!0,xs:12,sm:12,md:2,lg:2,style:{justifyContent:"center",alignItems:"center",display:"flex"},children:(0,i.jsx)(l.Z,{children:t?"⬇":"➡"})}),(0,i.jsx)(r.ZP,{item:!0,xs:12,sm:12,md:5,lg:5,children:(0,i.jsx)(d.Z,{children:(0,i.jsx)(o.Z,{children:(0,i.jsx)(l.Z,{variant:"body2",children:"리눅스(우분투)의 systmed를 이용하여 os가 부팅되었을때, 자동으로 python 스크립트가 작동하도록 설정."})})})})]}),t&&(0,i.jsx)("hr",{}),(0,i.jsxs)(r.ZP,{container:!0,children:[(0,i.jsx)(r.ZP,{item:!0,xs:12,sm:12,md:5,lg:5,children:(0,i.jsx)(d.Z,{children:(0,i.jsx)(o.Z,{children:(0,i.jsx)(l.Z,{variant:"body2",children:"하나의 프로세스를 모두 사용하는 여러 작업들을 동시 실행해야 하며, 해당 프로세스끼리 통신을 통해 데이터를 주고 받아야 함."})})})}),(0,i.jsx)(r.ZP,{item:!0,xs:12,sm:12,md:2,lg:2,style:{justifyContent:"center",alignItems:"center",display:"flex"},children:(0,i.jsx)(l.Z,{children:t?"⬇":"➡"})}),(0,i.jsx)(r.ZP,{item:!0,xs:12,sm:12,md:5,lg:5,children:(0,i.jsx)(d.Z,{children:(0,i.jsx)(o.Z,{children:(0,i.jsx)(l.Z,{variant:"body2",children:"멀티 프로세싱으로 필요한 서비스들을 병렬적으로 실행함. 그리고 멀티프로세싱의 큐를 이용하여 각 프로세스끼리 통신을 할 수 있도록 함."})})})})]})]})]})]})})}}},function(e){e.O(0,[4991,1380,2888,9774,179],function(){return e(e.s=34434)}),_N_E=e.O()}]);