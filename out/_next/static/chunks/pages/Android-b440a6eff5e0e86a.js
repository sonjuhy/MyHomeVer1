(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3589],{27677:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/Android",function(){return t(57261)}])},7925:function(e,n,t){"use strict";t.d(n,{CG:function(){return o},TL:function(){return i}});var r=t(45007);let i=r.I0,o=r.v9},57261:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return g}});var r=t(85893),i=t(51233),o=t(15861),a=t(23029),d=t(90948),c=t(90629),p=t(67294),s=t(89285),l=t(55534),m=t(7925);let u=(0,d.ZP)(c.Z)(e=>{let{theme:n}=e;return{backgroundColor:"dark"===n.palette.mode?"#1A2027":"#fff",...n.typography.body2,padding:n.spacing(1),textAlign:"center",color:n.palette.text.secondary}});function g(){let e=(0,m.TL)(),{prefix:n}=(0,p.useContext)(s.ZP),t=(0,m.CG)(e=>e.page.smallMode),d=t?16:32;return(0,p.useEffect)(()=>{let n=()=>{var n;let t=null===(n=document.getElementById("android_container"))||void 0===n?void 0:n.offsetWidth;t&&t<=900?e((0,l.gh)(!0)):e((0,l.gh)(!1))};return n(),window.addEventListener("resize",n),()=>{window.removeEventListener("resize",n)}},[]),(0,r.jsx)("div",{id:"android_container",style:{height:"100%",width:"100%",backgroundColor:"#f4f5ff"},children:(0,r.jsxs)(i.Z,{style:{display:"flex",justifyContent:"center",alignItems:"center"},children:[(0,r.jsx)(o.Z,{style:{fontSize:2*d,textAlign:t?"center":"left",marginTop:"1rem",marginBottom:t?"1rem":"3rem"},children:"\uD83C\uDF10 Android 상세 설명"}),(0,r.jsxs)(u,{style:{width:"90%",marginBottom:"3rem"},children:[(0,r.jsxs)(i.Z,{spacing:2,children:[(0,r.jsx)(o.Z,{style:{fontSize:t?1.3*d:d},children:"DB 통신"}),(0,r.jsx)(o.Z,{style:{fontSize:t?1.1*d:.8*d},children:"▪ HttpUrlConnection(With AsyncTask)"}),(0,r.jsx)(o.Z,{style:{fontSize:t?.9*d:.5*d},children:"▪ 작동 순서"}),(0,r.jsx)("div",{style:{display:"flex",width:"100%",justifyContent:"center",alignItems:"center",marginBottom:"1rem"},children:(0,r.jsx)("div",{style:{display:"flex",width:"70%",alignItems:"center",justifyContent:"center"},children:(0,r.jsx)("img",{src:"".concat(n,"/image/image/AndroidAsyncTask.png"),style:{objectFit:"contain",borderRadius:"2rem"}})})}),(0,r.jsx)(o.Z,{variant:"body1",children:"▪ 코드"}),(0,r.jsx)("div",{style:{margin:"1rem",textAlign:"left"},children:(0,r.jsx)(a.dn,{language:"java",showLineNumbers:!0,theme:a.cL,text:'import android.app.ProgressDialog;\nimport android.content.Context;\nimport android.os.AsyncTask;\nimport android.util.Log;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.ProtocolException;\nimport java.net.SocketException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class Network extends AsyncTask<String, Void, String> {\n    private HttpURLConnection httpURLConnection = null;\n    private OutputStream outputStream = null;\n    private String data = null;\n    private String link = "Server Link";\n    private String line = null;\n    private String mJsonString = null;\n    private int responseStatusCode = 0;\n    private int mode = 0;\n    private boolean dialog_use = false;\n    private boolean upload_mode = false;\n\n    private Context context;\n    private InputStream inputStream = null;\n    private InputStreamReader inputStreamReader = null;\n    private BufferedReader bufferedReader = null;\n    private StringBuilder stringBuilder = null;\n    private URL url = null;\n\n    private ProgressDialog progressDialog;\n\n    public Network(Context context){\n        this.context = context;\n        this.dialog_use = true;\n    }\n    public Network(){\n        this.dialog_use = false;\n    }\n    @Override\n    protected void onPreExecute() {\n        if(dialog_use) {\n            progressDialog = new ProgressDialog(context);\n            progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);\n            progressDialog.setCancelable(false);\n            progressDialog.setMessage("로딩 중입니다.");\n            progressDialog.show();\n        }\n        super.onPreExecute();\n    }\n\n    @Override\n    protected String doInBackground(String... _param){\n        String n = _param[0];\n        switch (n){\n            case "login":\n                link += "/Login_Check.php";\n                Login_Input(_param[1],_param[2]);\n                mode = 1;\n                upload_mode = true;\n                break;\n            case "Signin":\n                link += "/SignUp.php";\n                Signin_Input(_param[1], _param[2], _param[3]);\n                mode = 2;\n                upload_mode = true;\n                break;\n            case "IDOverlap":\n                link += "/SignUP_IDCheck.php";\n                Overlap_Input(_param[1]);\n                upload_mode = true;\n                break;\n            case "Get_Userinfo":\n                link += "/Get_UserInfo.php";\n                mode = 3;\n                break;\n            case "Get_Ver":\n                link += "/Get_Version.php";\n                break;\n            case "Update_User":\n                link += "/Update_UserData.php";\n                Signin_Input(_param[1], _param[2], _param[3]);\n                upload_mode = true;\n                break;\n            case "FileList":\n                link += "/Get_Filelist.php";\n                Filelist_Input(_param[1]);\n                upload_mode = true;\n                break;\n            case "FileDelete":\n                link += "/Delete_file.php";\n                FileDelete_Input(_param[1], _param[2], _param[3], _param[4]);//dir, path, mode, user\n                upload_mode = true;\n                break;\n            case "FileRestore":\n                link += "/Restore_file.php";\n                FileRestore_Input(_param[1], _param[2], _param[3], _param[4]);//file, path, mode, user\n                upload_mode = true;\n                break;\n            case "FileDistroy":\n                link += "/Distroy_file.php";\n                FileDistroy_Input(_param[1], _param[2]);//file,  path\n                upload_mode = true;\n                break;\n            case "Get_Notice":\n                link += "/Notice_GetList.php";\n                break;\n            case "Set_Notice":\n                link += "/Notice_Set.php";\n                Notice_Input(_param[1], _param[2], _param[3], _param[4]); // time, content, name, title\n                upload_mode = true;\n                break;\n            case "Delete_Notice":\n                link += "/Notice_Delete.php";\n                NoticeDelete_Input(_param[1]);//Num\n                upload_mode = true;\n                break;\n            case "Light_State":\n                link += "/Light_State.php";\n                upload_mode = false;\n                break;\n            case "Light_ReserveList":\n                link += "/Get_Reserve.php";\n                upload_mode = false;\n                break;\n            case "Light_ReserveUpload"://String time, String day, String name, String room, String roomkor, String action, String repeat\n                link += "/Set_Reserve.php";\n                LightReserveSet_Input(_param[1], _param[2], _param[3], _param[4], _param[5], _param[6], _param[7]);\n                upload_mode = true;\n                break;\n            case "Light_ReserveUpdate"://String time, String day, String name, String room, String roomkor, String action, String repeat, String num\n                link += "/Update_Reserve.php";\n                LightReserveUpdate_Input(_param[1], _param[2], _param[3], _param[4], _param[5], _param[6], _param[7], _param[8]);\n                upload_mode = true;\n                break;\n            case "Light_ReserveDelete":\n                link += "/Delete_Reserve.php";\n                LightReserveDelete_Input(_param[1]);\n                upload_mode = true;\n                break;\n\n        }\n        try{\n            url = new URL(link);\n\n            httpURLConnection = (HttpURLConnection)url.openConnection();\n            httpURLConnection.setReadTimeout(15000);\n            httpURLConnection.setConnectTimeout(15000);\n            httpURLConnection.setRequestMethod("POST");\n            httpURLConnection.setDoInput(true);\n            httpURLConnection.setDoOutput(true);\n            httpURLConnection.connect();\n\n            if(upload_mode) {\n                outputStream = httpURLConnection.getOutputStream();\n                outputStream.write(data.getBytes(StandardCharsets.UTF_8));\n                outputStream.flush();\n                outputStream.close();\n            }\n\n            responseStatusCode = httpURLConnection.getResponseCode();\n\n            if(responseStatusCode == HttpURLConnection.HTTP_OK){\n                inputStream = httpURLConnection.getInputStream();\n                System.out.println("response is ok");\n            }\n            else{\n                inputStream = httpURLConnection.getErrorStream();\n                System.out.println("response is error : " + inputStream);\n            }\n            inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n            bufferedReader = new BufferedReader(inputStreamReader);\n\n            stringBuilder = new StringBuilder();\n\n            while((line = bufferedReader.readLine()) != null){\n                stringBuilder.append(line);\n            }\n\n            httpURLConnection.disconnect();\n            return stringBuilder.toString().trim();\n\n        } catch (ProtocolException e) {\n            e.printStackTrace();\n            System.out.println("protocol error");\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.out.println("IO error");\n        }\n\n        return "Error";\n    }\n\n    @Override\n    protected void onPostExecute(String s) {\n        switch (mode){\n            case 1://login\n                break;\n            case 2:\n                break;\n            case 3:\n                break;\n        }\n        if(dialog_use) {\n            progressDialog.dismiss();\n        }\n        super.onPostExecute(s);\n    }\n\n    private void Login_Input(String user_id, String user_pw){\n        try {\n            data = URLEncoder.encode("ID", "UTF-8") + "=" + URLEncoder.encode(user_id, "UTF-8");\n            data += "&" + URLEncoder.encode("PW", "UTF-8") + "=" + URLEncoder.encode(user_pw, "UTF-8");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    private void Signin_Input(String user_id, String user_pw, String user_name){\n        try {\n            data = URLEncoder.encode("ID", "UTF-8") + "=" + URLEncoder.encode(user_id, "UTF-8");\n            data += "&" + URLEncoder.encode("Name","UTF-8")+"="+ URLEncoder.encode(user_name,"UTF-8");\n            data += "&" + URLEncoder.encode("PW", "UTF-8") + "=" + URLEncoder.encode(user_pw, "UTF-8");\n            System.out.println("Sign data : " + data);\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    private void Filelist_Input(String dir){\n        try {\n            data = URLEncoder.encode("server_dir","UTF-8")+"="+URLEncoder.encode(dir,"UTF-8");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    private void FileDelete_Input(String dir, String path, String mode, String user){\n        try {\n            data = URLEncoder.encode("dir", "UTF-8") + "=" + URLEncoder.encode(dir, "UTF-8");\n            data += "&" + URLEncoder.encode("path","UTF-8")+"="+ URLEncoder.encode(path,"UTF-8");\n            data += "&" + URLEncoder.encode("user","UTF-8")+"="+ URLEncoder.encode(user,"UTF-8");\n            data += "&" + URLEncoder.encode("mode", "UTF-8") + "=" + URLEncoder.encode(mode, "UTF-8");\n            System.out.println("Sign data : " + data);\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    private void FileRestore_Input(String file, String path, String mode, String user){\n        try {\n            data = URLEncoder.encode("file", "UTF-8") + "=" + URLEncoder.encode(file, "UTF-8");\n            data += "&" + URLEncoder.encode("path","UTF-8")+"="+ URLEncoder.encode(path,"UTF-8");\n            data += "&" + URLEncoder.encode("user","UTF-8")+"="+ URLEncoder.encode(user,"UTF-8");\n            data += "&" + URLEncoder.encode("mode", "UTF-8") + "=" + URLEncoder.encode(mode, "UTF-8");\n            System.out.println("Sign data : " + data);\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    private void FileDistroy_Input(String file, String path){\n        try {\n            data = URLEncoder.encode("file","UTF-8")+"="+URLEncoder.encode(file,"UTF-8");\n            data += "&" + URLEncoder.encode("path", "UTF-8") + "=" + URLEncoder.encode(path, "UTF-8");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    private void Overlap_Input(String ID){\n        try {\n            data = URLEncoder.encode("ID","UTF-8")+"="+URLEncoder.encode(ID,"UTF-8");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    private void Notice_Input(String Time,String Content,String Name, String title){\n        try {\n            data = URLEncoder.encode("Time","UTF-8")+"="+URLEncoder.encode(Time,"UTF-8");\n            data += "&" + URLEncoder.encode("Content", "UTF-8") + "=" + URLEncoder.encode(Content, "UTF-8");\n            data += "&" + URLEncoder.encode("Name", "UTF-8") + "=" + URLEncoder.encode(Name, "UTF-8");\n            data += "&" + URLEncoder.encode("Title", "UTF-8") + "=" + URLEncoder.encode(title, "UTF-8");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    private void NoticeDelete_Input(String Num){\n        try {\n            data = URLEncoder.encode("Num","UTF-8")+"="+URLEncoder.encode(Num,"UTF-8");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    private void LightReserveSet_Input(String time, String day, String name, String room, String roomkor , String action, String repeat){\n        try {\n            data = URLEncoder.encode("Time","UTF-8")+"="+URLEncoder.encode(time,"UTF-8");\n            data += "&" + URLEncoder.encode("Do", "UTF-8") + "=" + URLEncoder.encode(action, "UTF-8");\n            data += "&" + URLEncoder.encode("Name", "UTF-8") + "=" + URLEncoder.encode(name, "UTF-8");\n            data += "&" + URLEncoder.encode("Day", "UTF-8") + "=" + URLEncoder.encode(day, "UTF-8");\n            data += "&" + URLEncoder.encode("Room", "UTF-8") + "=" + URLEncoder.encode(room, "UTF-8");\n            data += "&" + URLEncoder.encode("RoomKor", "UTF-8") + "=" + URLEncoder.encode(roomkor, "UTF-8");\n            data += "&" + URLEncoder.encode("Repeat", "UTF-8") + "=" + URLEncoder.encode(repeat, "UTF-8");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    private void LightReserveUpdate_Input(String time, String day, String name, String room, String roomkor , String action, String repeat, String num){\n        try {\n            data = URLEncoder.encode("Time","UTF-8")+"="+URLEncoder.encode(time,"UTF-8");\n            data += "&" + URLEncoder.encode("Do", "UTF-8") + "=" + URLEncoder.encode(action, "UTF-8");\n            data += "&" + URLEncoder.encode("Name", "UTF-8") + "=" + URLEncoder.encode(name, "UTF-8");\n            data += "&" + URLEncoder.encode("Day", "UTF-8") + "=" + URLEncoder.encode(day, "UTF-8");\n            data += "&" + URLEncoder.encode("Room", "UTF-8") + "=" + URLEncoder.encode(room, "UTF-8");\n            data += "&" + URLEncoder.encode("RoomKor", "UTF-8") + "=" + URLEncoder.encode(roomkor, "UTF-8");\n            data += "&" + URLEncoder.encode("Repeat", "UTF-8") + "=" + URLEncoder.encode(repeat, "UTF-8");\n            data += "&" + URLEncoder.encode("Num", "UTF-8") + "=" + URLEncoder.encode(num, "UTF-8");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    private void LightReserveDelete_Input(String num){\n        try {\n            data = URLEncoder.encode("Num","UTF-8")+"="+URLEncoder.encode(num,"UTF-8");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n}'})})]}),(0,r.jsxs)(i.Z,{spacing:2,children:[(0,r.jsx)(o.Z,{style:{fontSize:t?1.3*d:d},children:"MQTT"}),(0,r.jsx)(o.Z,{style:{fontSize:t?1.1*d:.8*d},children:"▪ MQTT Connection"}),(0,r.jsx)(o.Z,{variant:"body1",children:"▪ 코드"}),(0,r.jsx)("div",{style:{margin:"1rem",textAlign:"left"},children:(0,r.jsx)(a.dn,{language:"java",showLineNumbers:!0,theme:a.cL,text:'public class MQTT_Main extends Service {\n                  private static final String TAG = "Mqtt_Client";\n                  private MqttClient mqttClient_Light;\n              \n                  private String TOPIC_PUB = "";\n                  private String TOPIC_SUB = "";\n              \n                  private String TOPIC_LIGHT_PUB = "MyHome/Light/Pub/Server";\n                  private String TOPIC_LIGHT_SUB = "MyHome/Light/Result";\n                  private String TOPIC_RESERVE_PUB = "MyHome/Light/Reserve/Pub";\n              \n                  private String Server_IP = "tcp://server link:1883";\n                  private String category = null;\n              \n                  private int mode = 0;\n              \n              \n                  public MQTT_Main(){\n                      try {\n                          mqttClient_Light = new MqttClient(Server_IP, MqttClient.generateClientId(), null);\n                          mqttClient_Light.connect();\n                      } catch (MqttException e) {\n                          e.printStackTrace();\n                      }\n                  }\n}'})}),(0,r.jsx)(o.Z,{style:{fontSize:t?1.1*d:.8*d},children:"▪ MQTT Callback(Listener)"}),(0,r.jsx)(o.Z,{style:{fontSize:t?.9*d:.5*d},children:"▪ 작동 순서"}),(0,r.jsx)("div",{style:{display:"flex",width:"100%",justifyContent:"center",alignItems:"center",marginBottom:"1rem"},children:(0,r.jsx)("div",{style:{display:"flex",width:"70%",alignItems:"center",justifyContent:"center"},children:(0,r.jsx)("img",{src:"".concat(n,"/image/image/AndroidMQTTCallBack.png"),style:{objectFit:"contain",borderRadius:"2rem"}})})}),(0,r.jsx)(o.Z,{variant:"body1",children:"▪ 코드"}),(0,r.jsx)("div",{style:{margin:"1rem",textAlign:"left"},children:(0,r.jsx)(a.dn,{language:"java",showLineNumbers:!0,theme:a.cL,text:'\n  public void Mqtt_Control(boolean mode){//true : on, false : off\n    try {\n        mqttClient = new MqttClient(Server_IP, MqttClient.generateClientId(), null);\n        mqttClient.connect();\n        if(mqttClient.isConnected()){\n            System.out.println("Out class connected");\n        }\n        else{\n            System.out.println("Out class connected failed");\n            mqttClient.connect();\n        }\n        \n        mqttClient.subscribe(TOPIC_SUB+user.Get_name());\n        mqttClient.setCallback(new MqttCallback() {\n            @Override\n            public void connectionLost(Throwable throwable) {\n\n            }\n\n            @Override\n            public void messageArrived(String s, MqttMessage mqttMessage) throws Exception {\n                System.out.println("Message is arrived mqtt : " + mqttMessage.toString());\n                //Toast.makeText(context, "test"+mqttMessage.toString(), Toast.LENGTH_SHORT).show();\n                toasttest(mqttMessage.toString());\n            }\n\n            @Override\n            public void deliveryComplete(IMqttDeliveryToken iMqttDeliveryToken) {\n                System.out.println("My_Room_Light");\n            }\n        });\n    } catch (MqttException e) {\n        e.printStackTrace();\n    }\n}\n                '})}),(0,r.jsx)(o.Z,{style:{fontSize:t?1.1*d:.8*d},children:"▪ MQTT Pub(Publisher)"}),(0,r.jsx)(o.Z,{style:{fontSize:t?.9*d:.5*d},children:"▪ 작동 순서"}),(0,r.jsx)("div",{style:{display:"flex",width:"100%",justifyContent:"center",alignItems:"center",marginBottom:"1rem"},children:(0,r.jsx)("div",{style:{display:"flex",width:"70%",alignItems:"center",justifyContent:"center"},children:(0,r.jsx)("img",{src:"".concat(n,"/image/image/ESP8266CallBack.png"),style:{objectFit:"contain",borderRadius:"2rem"}})})}),(0,r.jsx)(o.Z,{variant:"body1",children:"▪ 코드"}),(0,r.jsx)("div",{style:{margin:"1rem",textAlign:"left"},children:(0,r.jsx)(a.dn,{language:"java",showLineNumbers:!0,theme:a.cL,text:'\npublic void Mqtt_Publish(int mode, String message){\n  try {\n      switch (mode){\n          case 1://room light\n              if(selected_str.equals("balcony main")){\n                  category = "living Room";\n              }\n              JSONObject object = new JSONObject();\n              try{\n                  JSONObject tmp = new JSONObject();\n                  tmp.put("sender",user.Get_name());\n                  tmp.put("message",message);\n                  tmp.put("destination",selected_str);\n                  tmp.put("room",category);\n                  object.put("Light",tmp);\n              } catch (JSONException e) {\n                  e.printStackTrace();\n              }\n              String tmp_str = object.toString();\n              mqttClient_Light.publish(TOPIC_PUB, new MqttMessage(tmp_str.getBytes()));\n              break;\n          case 2://light reserve\n              mqttClient_Reserve.publish(TOPIC_LIGHT_PUB, new MqttMessage(message.getBytes()));\n              break;\n      }\n  } catch (MqttException e) {\n      e.printStackTrace();\n  }\n}\n                '})})]})]})]})})}}},function(e){e.O(0,[4939,2888,9774,179],function(){return e(e.s=27677)}),_N_E=e.O()}]);