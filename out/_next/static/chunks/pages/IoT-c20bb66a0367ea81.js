(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9409],{36049:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/IoT",function(){return t(62983)}])},7925:function(e,n,t){"use strict";t.d(n,{CG:function(){return r},TL:function(){return s}});var i=t(45007);let s=i.I0,r=i.v9},62983:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return f}});var i=t(85893),s=t(51233),r=t(15861),l=t(23029),o=t(90948),a=t(90629),c=t(67294),d=t(89285),u=t(55534),m=t(7925);let g=(0,o.ZP)(a.Z)(e=>{let{theme:n}=e;return{backgroundColor:"dark"===n.palette.mode?"#1A2027":"#fff",...n.typography.body2,padding:n.spacing(1),textAlign:"center",color:n.palette.text.secondary}});function f(){let e=(0,m.TL)(),{prefix:n}=(0,c.useContext)(d.ZP),t=(0,m.CG)(e=>e.page.smallMode),o=t?16:32;return(0,c.useEffect)(()=>{let n=()=>{var n;let t=null===(n=document.getElementById("iot_container"))||void 0===n?void 0:n.offsetWidth;t&&t<=900?e((0,u.gh)(!0)):e((0,u.gh)(!1))};return n(),window.addEventListener("resize",n),()=>{window.removeEventListener("resize",n)}},[]),(0,i.jsx)("div",{id:"iot_container",style:{height:"100%",width:"100%",backgroundColor:"#f4f5ff"},children:(0,i.jsxs)(s.Z,{style:{display:"flex",justifyContent:"center",alignItems:"center"},children:[(0,i.jsx)(r.Z,{style:{fontSize:2*o,textAlign:t?"center":"left",marginTop:"1rem",marginBottom:t?"1rem":"3rem"},children:"\uD83C\uDF10 IoT 상세 설명"}),(0,i.jsxs)(s.Z,{style:{display:"flex",width:"100%",justifyContent:"center",alignItems:"center",marginBottom:"1rem"},children:[(0,i.jsx)(r.Z,{style:{fontSize:t?1.5*o:1.2*o},children:"IoT 펌웨어 구조도(ESP8266)"}),(0,i.jsx)("div",{style:{display:"flex",width:"70%",justifyContent:"center"},children:(0,i.jsx)("img",{src:"".concat(n,"/image/image/ESP8266Sequence.png"),style:{objectFit:"contain",borderRadius:"2rem"}})})]}),(0,i.jsxs)(g,{style:{width:"90%",marginBottom:"3rem"},children:[(0,i.jsxs)(s.Z,{spacing:2,children:[(0,i.jsx)(r.Z,{style:{fontSize:t?1.3*o:o},children:"Button 컨트롤"}),(0,i.jsx)(r.Z,{style:{fontSize:t?1.1*o:.8*o},children:"▪ Button Handler"}),(0,i.jsx)(r.Z,{style:{fontSize:t?.9*o:.5*o},children:"▪ 작동 순서"}),(0,i.jsx)("div",{style:{display:"flex",width:"100%",justifyContent:"center",alignItems:"center",marginBottom:"1rem"},children:(0,i.jsx)("div",{style:{display:"flex",width:"70%",alignItems:"center",justifyContent:"center"},children:(0,i.jsx)("img",{src:"".concat(n,"/image/image/ESP8266Sequence.png"),style:{objectFit:"contain",borderRadius:"2rem"}})})}),(0,i.jsx)(r.Z,{variant:"body1",children:"▪ 코드"}),(0,i.jsx)("div",{style:{margin:"1rem",textAlign:"left"},children:(0,i.jsx)(l.dn,{language:"c++",showLineNumbers:!0,theme:l.cL,text:'/* Read and handle button Press*/\nvoid getButton(void) {\n// short press butoon to change state of relay\nif (digitalRead(BUTTONPIN) == false ) {\n    ++ButtonCount;\n    }\nif (digitalRead(BUTTONPIN) == false && ButtonCount > 1 && ButtonCount < 12 ) {\n    Serial.println(RelayState);\n    if(RelayState==false){\n        client.publish(mqtt_topic,"{"sender":"self","message":"On","room":"test room"}"); \n    }\n    else{\n        client.publish(mqtt_topic,"{"sender":"self","message":"Off","room":"test room"}");\n    }\n    ButtonCount = 0;\n    delay(500);\n}\n/* long press button restart */\nif (ButtonCount > 12) {\n    setLED(!LEDState);\n    buttonTick.detach();    // Stop Tickers\n    /* Wait for release button */\n    while (!digitalRead(BUTTONPIN)) yield();\n    delay(100);\n    ESP.restart();\n}\nif (digitalRead(BUTTONPIN) == true) ButtonCount = 0;\nButtonFlag = false;\n}'})})]}),(0,i.jsxs)(s.Z,{spacing:2,children:[(0,i.jsx)(r.Z,{style:{fontSize:t?1.3*o:o},children:"MQTT"}),(0,i.jsx)(r.Z,{style:{fontSize:t?1.1*o:.8*o},children:"▪ MQTT Connection"}),(0,i.jsx)(r.Z,{style:{fontSize:t?.9*o:.5*o},children:"▪ 작동 순서"}),(0,i.jsx)("div",{style:{display:"flex",width:"100%",justifyContent:"center",alignItems:"center",marginBottom:"1rem"},children:(0,i.jsx)("div",{style:{display:"flex",width:"70%",alignItems:"center",justifyContent:"center"},children:(0,i.jsx)("img",{src:"".concat(n,"/image/image/ESP8266Connection.png"),style:{objectFit:"contain",borderRadius:"2rem"}})})}),(0,i.jsx)(r.Z,{variant:"body1",children:"▪ 코드"}),(0,i.jsx)("div",{style:{margin:"1rem",textAlign:"left"},children:(0,i.jsx)(l.dn,{language:"c++",showLineNumbers:!0,theme:l.cL,text:'void reconnect() {\n    // Loop until we\'re reconnected\n    Serial.print("Attempting MQTT connection...");\n    // Attempt to connect\n    if (client.connect(mqtt_id)) { //change to ClientID\n        Serial.println("connected");\n            \n        // ... and resubscribe\n        client.subscribe(mqtt_topic_sub);\n\n        // Once connected, publish an announcement...\n        client.publish(mqtt_topic_con, "{"sender":"self","message":"reconneted","room":"test room"}");\n    } \n    else {\n        Serial.print("failed, rc=");\n        Serial.println(client.state());\n    }\n\n}'})}),(0,i.jsx)(r.Z,{style:{fontSize:t?1.1*o:.8*o},children:"▪ MQTT Callback(Listener)"}),(0,i.jsx)(r.Z,{style:{fontSize:t?.9*o:.5*o},children:"▪ 작동 순서"}),(0,i.jsx)("div",{style:{display:"flex",width:"100%",justifyContent:"center",alignItems:"center",marginBottom:"1rem"},children:(0,i.jsx)("div",{style:{display:"flex",width:"70%",alignItems:"center",justifyContent:"center"},children:(0,i.jsx)("img",{src:"".concat(n,"/image/image/ESP8266CallBack.png"),style:{objectFit:"contain",borderRadius:"2rem"}})})}),(0,i.jsx)(r.Z,{variant:"body1",children:"▪ 코드"}),(0,i.jsx)("div",{style:{margin:"1rem",textAlign:"left"},children:(0,i.jsx)(l.dn,{language:"c++",showLineNumbers:!0,theme:l.cL,text:'void callback(char* topic, byte* payload, unsigned int length) {\n        String Msg = "";\n        int i=0;\n        while (i<length) Msg += (char)payload[i++];\n        \n        StaticJsonDocument<256> doc;\n        DeserializationError error = deserializeJson(doc, Msg.c_str(), length);\n        \n        if (error) {\n            Serial.print(F("deserializeJson() failed: "));\n            Serial.println(error.c_str());\n            char error_put[64];\n            StaticJsonDocument<64> doc;\n            doc["sender"] = "self";\n            doc["message"] = error.c_str();\n            doc["room"] = mqtt_id;\n            client.publish(mqtt_topic, error_put);\n            return;\n        }\n        \n        const char* sender = doc["Light"]["sender"];\n        const char* message = doc["Light"]["message"];\n        const char* destination = doc["Light"]["destination"];\n        String message_str = message;\n        String destination_str = destination;\n        \n        if(message_str.equals("ON")){\n            if(RelayState == true){\n            mqtt_publish("already On", sender);\n            }\n            else{\n            setRelay(!RelayState);\n            mqtt_publish("On", sender);\n            }\n        }\n        else if(message_str.equals("STATE")){\n            if(RelayState == true){\n            mqtt_publish("On", sender);\n            }\n            else{\n            mqtt_publish("Off", sender);\n            }\n        }\n        else{\n            if(message_str.equals("OFF")){\n                if(RelayState == true){\n                    setRelay(!RelayState);\n                    mqtt_publish("Off", sender);\n                }\n                else{\n                    mqtt_publish("already Off", sender);\n                }\n            }\n        }\n    } '})})]})]})]})})}}},function(e){e.O(0,[4939,2888,9774,179],function(){return e(e.s=36049)}),_N_E=e.O()}]);